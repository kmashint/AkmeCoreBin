package akme.core.net;import java.io.IOException;import java.net.NetPermission;import java.net.ProtocolException;import java.net.URL;/** * Extend the Oracle/Sun JDK HttpURLConnection to allow extended HTTP methods. */public class AkmeHttpsURLConnection extends sun.net.www.protocol.https.HttpsURLConnectionImpl {    /* valid plus extended HTTP methods */    private static final String[] methods = {    	"GET", "POST", "HEAD", "OPTIONS", "PUT", "DELETE", "TRACE", // standard     	"COPY" // extended    };    /**     * Extend and allow public instantiation of this HttpURLConnection.     * @param url     */	public AkmeHttpsURLConnection(final URL url) throws IOException {		// Use Oracle/Sun JDK HttpsURLConnection.		super(url);	}	@Override	public void disconnect() {		super.disconnect();	}	@Override	public boolean usingProxy() {		return super.usingProxy();	}	@Override	public void connect() throws IOException {		super.connect();	}	    /**     * Set the method for the URL request, one of:     * <UL>     *  <LI>GET     *  <LI>POST     *  <LI>HEAD     *  <LI>OPTIONS     *  <LI>PUT     *  <LI>DELETE     *  <LI>TRACE     * </UL> are legal, subject to protocol restrictions.  The default method is GET.     * Extended methods:     * <UL>     * <LI>COPY     * </UL>      *      * @param method the HTTP method     * @exception ProtocolException if the method cannot be reset or if     *              the requested method isn't valid for HTTP.     * @see #getRequestMethod()     */    public void setRequestMethod(String method) throws ProtocolException {		if (connected) {		    throw new ProtocolException("Can't reset method: already connected");		}		for (int i = 0; i < methods.length; i++) {		    if (methods[i].equals(method)) {                if (method.equals("TRACE")) {                    SecurityManager s = System.getSecurityManager();                    if (s != null) {                        s.checkPermission(new NetPermission("allowHttpTrace"));                    }                }				this.method = method;				return;		    }		}		throw new ProtocolException("Invalid HTTP method: " + method);    }	}