<!DOCTYPE html >
<html>
<head>
<title>Find Ethernet Device</title>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta http-equiv="Content-Script-Type" content="text/javascript"/>
<!-- GetObject is not supported in JScript/HTA for IE=9 or higher, use IE=8 or vbs helper before js.
	http://social.technet.microsoft.com/Forums/en-US/ITCG/thread/37246a26-6401-4d3f-87c7-77046e11b8af/
	More on HTA and Windows Scripting Host.
	http://msdn.microsoft.com/en-us/library/ms536496%28v=vs.85%29.aspx
	-->
<hta:application id="HTA"
	applicationName="Find Ethernet Device"
	singleInstance="yes"
	/>
<style>
body { }
#body { }
#inputDiv { float:left; }
#outputDiv { float:right; clear:right; }
#outputFrame { width: 480px; height: ;}
#log { clear:both; }
</style>
</head>
<body>
<div id='body'>

<p>TODO: Keep general finder but better to use ServerXMLHTTP.6.0 to :3128/squid-internal-mgr/info ,
async in a loop of callbacks with Array.forEach.
</p>
<div id='inputDiv'>
<form name='testForm' onsubmit='return false;'>
<input type='text' name='ipAddress' value=''/> this ip-address
<br/><input type='text' name='subnetMask' value=''/> subnet-mask
<br/><input type='text' name='lastAddress' value=''/> last-ip on subnet
<br/><select name='addressList'>
</select> known neighbours
<br/><input type='button' name='findBtn' value='find more' onclick='Test.find()' />
<input type='button' name='openBtn' value='open selected' onclick='Test.open()' />
</form>
</div>

<div id='outputDiv'>
<iframe id='outputFrame' application="no" src="javascript:"></iframe>
</div>

<div id='log'>
</div>

</div>
<script type="text/vbscript">Function AkmeGetObject(str) Set AkmeGetObject = GetObject(str) End Function</script>
<script src="AkmeUtilMicrosoft.js"></script>
<script>/*<![CDATA[*/
//

this.onload = function() {
	Test.ipconfig(); 
	Test.list();
};

var Test = (function(){

	//alert(ipInt2Str(ipStr2Int("123.234.123.234")))

	return {
		ipconfig: ipconfig,
		find: find,
		list: list,
		open: open
	};
	
	function ipconfig() {
		var outFile = AkmeMS.GetTempFilename(".txt");
		log("ipconfig to "+ outFile +" ...");
		AkmeMS.wsh.Run('cmd /c "ipconfig >"'+outFile+'""', AkmeMS.winHide, true);
		var ip, mask;
		readFileAndDelete(outFile, function(line, idx) {
			if (line.indexOf("  IPv4 Address") != -1) {
				ip = line.substring(line.lastIndexOf(' ')).replace(/^\s+|\s+$/g,"");
			}
			else if (ip && line.indexOf("Subnet Mask") != -1) {
				mask = line.substring(line.lastIndexOf(' ')).replace(/^\s+|\s+$/g,"");
				return false;
			}
			return true;
		});
		var form = document.forms[0];
		form.elements["ipAddress"].value = ip;
		form.elements["subnetMask"].value = mask;
		var subnetOnly = ipStr2Int(mask) ^ 0xffffffff;
		form.elements["lastAddress"].value = subnetOnly;
	}

	function find() { 
		log("");
		var form = document.forms[0];
		var ip = form.elements["ipAddress"].value;
		var sn = form.elements["subnetMask"].value;
		var bc = form.elements["lastAddress"].value;
		var prefix = ip.replace(/\.[0-9]+$/, ".");
		log("ping to "+ prefix +"* one address at a time ...");
		var a = [];
		for (var i=1; i<bc; i++) {
			a.push( 'ping -n 1 -i 4 -w 50 '+prefix+String(i) );
			if (i%16==0 || i+1==bc) {
				log("pinging up to "+ prefix+String(i) +" ...");
				AkmeMS.wsh.Run('cmd /c "'+a.join(' & ')+'"', AkmeMS.winHide, true);
				a.length = 0;
			}
		}
		this.list();
		return false;
	}
	
	function list() {
		var form = document.forms[0];
		var ip = form.elements["ipAddress"].value;
		var sn = form.elements["subnetMask"].value;
		var broadcastAddr = ip.replace(/\.[0-9]+$/, ".");
		var outFile = AkmeMS.GetTempFilename(".txt");
		log("");
		log("arp to "+ outFile +" ...");
		AkmeMS.wsh.Run('cmd /c "arp -a -N '+ ip +' >"'+outFile+'""', AkmeMS.winHide, true);
		var a = [];
		var found = false;
		readFileAndDelete(outFile, function(line, idx) {
			line = line.replace(/^\s+|\s+$/g,"");
			if (line.indexOf("Interface:") != -1) {
				found = line.indexOf(ip) != -1;
				return true;
			}
			if (line.indexOf(broadcastAddr) == -1) return true;
			if (found) a.push(line);
			return true;
		});
		var list = document.forms[0].elements["addressList"];
		list.options.length = 0;
		for (var i=0; i<a.length; i++) { var v = a[i];
			list.options[list.options.length] = new Option(v, v.substring(0, v.indexOf(' ')));
		}
	}

	function open() {
		var form = document.forms[0];
		var list = form.elements["addressList"];
		var ip = list.options[list.selectedIndex].value;
		var url = "http://"+ip+":3128/squid-internal-mgr/info"; alert(url);
		var frame = document.getElementById("outputFrame");
		frame.src = url;
	}

	function readFileAndDelete(fileName, lineFn) {
		var ins = AkmeMS.fso.OpenTextFile(fileName, AkmeMS.fsoRead, false);
		var str = null;
		try { 
			if (typeof lineFn == "function") for (var i=0; !ins.AtEndOfStream; i++) {
				str = ins.ReadLine();
				if (!lineFn(str, i+1)) break;
			}
			ins.Close();
		}
		catch (ex) {
			log(ex);
			try { ins.Close(); } catch (ex) { log(ex); }
			throw ex;
		}
		finally {
			if (AkmeMS.fso.FileExists(fileName)) AkmeMS.fso.DeleteFile(fileName);
		}
	}
	
	function ipStr2Int(ip) {
		var ipa = ip.split('.');
		return (Number(ipa[0])<<24)+(Number(ipa[1])<<16)+(Number(ipa[2])<<8)+Number(ipa[3]);
	}
	
	function ipInt2Str(ip) {
		return String(ip>>>24) +'.'+ String((ip>>>16)&0xff) +'.'+ String((ip>>>8)&0xff) +'.'+ String(ip&0xff);
	}
	
	function log(text) {
		var div = document.getElementById("log");
		div.appendChild(document.createTextNode(text));
		div.appendChild(document.createElement("br"));
	}

})();

/*]]>*/</script>
</body>
</html>